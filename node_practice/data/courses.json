[{"title":"Установка Python на компьютер","price":"100","img":"<h3>Установка Python для операционной системы Windows</h3><br>\r\nПеред тем как вы начнете программировать на языке Python, необходимо установить на ваш компьютер интерпретатор Python, а также стандартную библиотеку модулей кода, поставляемую вместе с ним. Все это можно свободно загрузить на странице python.org/download. Для пользователей операционной системы Windows существуют две версии инсталлятора: для 32-битных и 64-битных систем.<br>\r\n1. Запустите веб-браузер, перейдите на страницу python.org/ download и загрузите установщик, подходящий для вашей версии операционной системы.<br>\r\n2. После завершения загрузки запустите установщик, выберите режим установки для всех пользователей либо только для себя и нажмите кнопку Next (Далее) для продолжения.<br>\r\n3. Теперь подтвердите предлагаемое расположение установки, в название которого будет входить имя корневого диска, слово Python и номер версии.<br>\r\n4. Нажмите кнопку Next (Далее) для продолжения и убедитесь, что выбран компонент Add python.exe to Path (Добавить путь в системную переменную Path).<br>\r\n5. Нажмите Next (Далее), чтобы начать копирование файлов на ваш компьютер, а затем — Finish (Готово) для завершения процесса установки.<br>\r\n6. Чтобы убедиться, что Python теперь доступен, перезагрузите компьютер, запустите командную строку (cmd.exe) и наберите команду python –V — в ответ интерпретатор Python выдаст номер установленной версии.<br>\r\n<h3>Установка Python для операционной системы Linux</h3><br>\r\nВ дистрибутивы Linux обычно включен Python — по умолчанию там используется версия 2.7. Для работы с веткой 3.x вам, очевидно, предстоит установить нужный релиз дополнительно.<br>\r\n1. Запустите терминальное окно и наберите в точности, как указано, команду python –V для вывода информации об установленной версии по умолчанию.<br>\r\n2. Затем наберите в точности команду python3 –V для того, чтобы увидеть информацию об установленной версии ветки 3.x, если таковая имеется.<br>\r\n3. Теперь запустите на вашей Linux системе менеджер пакетов, чтобы посмотреть, какая из последних версий Python доступна для установки — например, на системах с Ubuntu вы можете использовать Центр приложений (Ubuntu Software Center).<br>\r\n4. Найдите в менеджере пакетов необходимое вам программное обеспечение, название которого содержит слово Python, чтобы посмотреть информацию, какие компоненты установлены или доступны для установки.<br>\r\n5. Наконец установите последнюю версию из ветки Python3.x — в данном случае это Python3.3.<br>\r\n6. Для проверки доступности последней версии Python на вашем компьютере запустите терминальное окно и наберите команду python3.3 –V.<br>\r\n\r\n","id":"c402f26f-2f8b-439f-8f03-47bf0b3fd308"},{"title":"Ваша первая программа","price":"100","img":"Кроме того, что интерактивный режим Python полезен в качестве простейшего калькулятора, его можно использовать для создания программ. Программа на языке Python — это обычный текстовый файл, созданный с помощью простого редактора, такого как Блокнот (Notepad), и сохраненный в файле с расширением .py. Запустить программу на Python можно, указав имя соответствующего файла после команды python в командной строке интерпретатора.<br>\r\nПо традиции первая программа, которую создают при изучении языка программирования, просто выводит какое-либо сообщение с приветствием. На языке Python для этого используется функция print(), сообщение для вывода этой функции указывается в скобках. Это может быть строка символов, заключенная в кавычки. Кавычки могут быть как двойными (\"\"), так и одинарными(''), но нельзя использовать одновременно и те, и другие.<br><br>\r\n1. На компьютере под управлением операционной системы Windows запустите простой текстовый редактор, такой как, например, Блокнот (Notepad).<br>\r\n2. Затем наберите следующую инструкцию в пустой строке редактора: print( 'Hello World!' )<br>\r\n3. Теперь создайте новый каталог C:\\MyScripts и сохраните в нем файл под именем hello.py.<br>\r\n4. Теперь запустите окно командной строки, перейдите в только что созданный каталог и наберите команду python hello.py — вы увидите, как интерпретатор Python запустит вашу программу и выведет приветственное сообщение.<br><br>\r\nПроцедура создания первой программы на Python в системе Linux ничем не отличается от той, которая делается в Windows. Однако, независимо от используемой платформы, всегда нужно помнить, что если установлены различные версии Python, то следует использовать корректную команду для вызова интерпретатора. Особенно это важно для системы Linux, которую обычно поставляют вместе с установленной версией Python 2.7, и набранная команда python по умолчанию вызывает именно этот интерпретатор. Если установлен Python 3.3 и вы хотите вызывать именно его для обработки вашей программы, то следует использовать команду python3.3, чтобы вызвать нужную версию интерпретатора.<br><br>\r\n1. В системе Linux запустите любой текстовый редактор, например Nano.<br>\r\n2. Затем наберите следующую инструкцию в пустом окне редактора: print( 'Hello World!' )<br>\r\n3. Теперь сохраните файл в вашем домашнем каталоге под именем hello.py.<br>\r\n4. Наконец запустите терминальное окно и перейдите в ваш домашний каталог, а затем наберите команду python3.3 hello.py — вы увидите, как интерпретатор Python запустит вашу программу и выведет соответствующее сообщение.<br>\r\n","id":"a1373d81-2538-4fa9-820c-c9d2a0172c51"},{"title":"Работа с переменными","price":"100","img":"В программировании переменная представляет собой некоторый контейнер в памяти компьютера, где хранятся данные. После того как данные сохранены, их можно вызвать, используя имя этой переменной. Программист может выбрать любое имя для переменной, за исключением ключевых слов языка Python. Лучше выбирать для переменных значащие имена, которые отражают их содержание. В программах Python данные, которые нужно хранить в переменных, вносятся с помощью оператора присваивания =, например, чтобы сохранить числовое значение 8 в переменной с именем a, нужно написать:<br><br>\r\n<strong><p style=\"padding-left: 85px\">a = 8</p></strong><br><br>\r\nЗатем можно обратиться к сохраненному значению переменной, используя ее имя. Таким образом, инструкция print( a ) выведет сохраненное значение 8. Переменным могут быть последовательно присвоены разные значения, и, следовательно, переменная способна принимать различные значения по мере работы программы — неслучайно она так и называется: переменная.<br>\r\nВ языке Python переменной должно быть присвоено начальное значение (инициализация переменной) в инструкции, которая объявляет эту переменную в программе, — иначе интерпретатор вызовет сообщение об ошибке not defined (неопределенная переменная)<br>\r\nВ одной инструкции разрешается инициализировать несколько переменных с одним значением. Это можно сделать, используя оператор присваивания =. Например, для инициализации переменных a, b и c и присваивания им значения 8 мы используем запись:<br><br>\r\n<strong><p style=\"padding-left: 85px\">a = b = c = 8</p></strong><br><br>\r\nНаоборот, несколько переменных можно проинициализировать с различными значениями и записать все это в одной инструкции, используя запятую в качестве разделителя. Например, в качестве инициализации переменных a, b и c с числовыми значениями 1, 2, 3 мы используем запись:<br><br>\r\n<strong><p style=\"padding-left: 85px\">a, b, c = 1, 2, 3</p></strong><br><br>\r\nНекоторые языки программирования, такие как Java, требуют указания типов переменных при их объявлении. При этом резервируется определенный объем памяти. Данный прием известен как статическая типизация. На переменные в языке Python такое ограничение не накладывается, и распределение памяти происходит в соответствии с присваиваемыми переменным значениями (динамическая типизация). Это означает, что переменная может содержать как целые числа, так и числа с плавающей точкой, текстовые строки или логические значения.<br>\r\nВы можете добавлять в свои программы на Python комментарии для описания инструкций или разделов кода. Для этого используется символ #. Все, что идет после этого символа до конца строки, игнорируется интерпретатором Python. Комментарии очень полезны — они помогают сделать ваш код понятным для других, а также для вас самих, когда вы позже к нему возвращаетесь.<br><br>\r\n1. Запустите текстовый редактор, в котором объявите и инициализируйте переменную, затем выведите хранящееся в ней значение. # Инициализируем переменную целочисленным значением var = 8 print( var )<br>\r\n2. Затем присвойте новое значение переменной и выведите его на экран. # Присваиваем переменной значение числа с плавающей точкой var = 3.142 print( var )<br>\r\n3. Теперь присваиваем другое значение и отображаем его опять. # Присваиваем переменной строковое значение var = 'Python in easy steps' print( var )<br>\r\n4. Наконец присваиваем еще одно значение и снова выводим ре зультат. # Присваиваем переменной логическое значение var = True print( var )<br>\r\n5. Сохраните файл в вашем рабочем каталоге, затем откройте командную строку из этого каталога и запустите программу, чтобы посмотреть результат ее вывода.<br>\r\n","id":"2382947c-0639-4507-9497-2aae3434c814"},{"title":"Арифметические операции","price":"100","img":"Основные операторы, используемые при программировании на языке Python, а также выполняемые ими операции, представлены в таблице ниже.\r\n <table border=\"1\"  cellpadding=\"5\" style=\"width: 400px\">\r\n                <tr>\r\n                    <th>Оператор</th>\r\n                    <th>Операция</th>\r\n                </tr>\r\n                <tr>\r\n                    <td>+</td>\r\n                    <td>Сложение</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>-</td>\r\n                    <td>Вычитание</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>*</td>\r\n                    <td>Умножение</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>/</td>\r\n                    <td>Деление</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>%</td>\r\n                    <td>Деление по модулю</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>//</td>\r\n                    <td>Целочисленное деление</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>**</td>\r\n                    <td>Возведение в степень</td>\r\n                </tr>\r\n            </table> <br>\r\nОператоры сложения, вычитания, умножения и деления не должны вызывать каких-либо сложностей. Они работают так, как вы, наверное, и ожидали. Стоит, однако, обращать внимание, что при использовании нескольких операторов рекомендуется группировать выражения с помощью скобок — операции внутри скобок выполняются первыми. Например, выражение:<br><br>\r\n a = b * c - d % e / f<br><br>\r\nможет быть не совсем понятно с точки зрения порядка вычислений. Но его разрешается уточнить, записав в виде:<br><br>\r\n a = ( b * c ) - ( ( d % e ) / f )<br><br>\r\nОператор % (деление по модулю) делит одно число на другое и возвращает остаток от деления. Он очень полезен для определения четности или нечетности числа<br>\r\nОператор // (целочисленное деление) работает так же, как и обычное деление, /, но отбрасывает результат после десятичной точки.<br>\r\nОператор ** (возведение в степень) возводит первый операнд в степень второго операнда.<br>\r\n1. Начните новую программу с инициализации двух переменных с целочисленными значениями. a = 8 b = 2<br>\r\n2. Затем выведите результат сложения переменных. print( 'Addition:\\t' , a , '+' , b , '=' , a + b )<br>\r\n3. Теперь отобразите результат вычитания переменных. print( 'Subtraction:\\t' , a , '-' , b , '=' , a - b )<br>\r\n4. Затем отобразите результат умножения переменных. print( 'Multiplication:\\t' , a , 'x' , b , '=' , a * b )<br>\r\n5. Отобразите результат деления переменных как с плавающей точкой, так и целочисленного. print( 'Division:\\t' , a , '÷' , b , '=' , a / b ) print( 'Floor Division:\\t' , a , '÷' , b , '=' , a // b )<br>\r\n6. Затем выведите остаток от деления одной величины на другую. print( 'Modulus:\\t' , a , '%' , b , '=' , a % b )<br>\r\n7. Наконец отобразите результат возведения первого операнда в степень второго. print( 'Exponent:\\t ' , a , '² = ' , a ** b , sep = '' )<br>\r\n8. Сохраните файл в вашем рабочем каталоге, откройте командную строку и запустите программу — вы увидите результат арифметических операций.<br>","id":"0d8c9d07-bea4-4344-a64c-0d4808b98204"},{"title":"Основные типы данных Python","price":"100","img":"В таблице ниже приведен обзор встроенных типов объектов Python и примеров синтак­сиса, используемого для кодирования их литералов, т.е. выражений, которые генери­руют такие объекты. Если вы работали с другими языками, то некоторые типы могут показаться знакомыми; скажем, числа и строки представляют соответственно число­вые и текстовые значения, а объекты файлов предлагают интерфейс для обработкиреальных файлов, хранящихся на компьютере.\r\n<table border=\"1\"  cellpadding=\"5\" style=\"width: 400px\">\r\n                <tr>\r\n                    <th>Тип объекта</th>\r\n                    <th>Пример литерала/создания</th>\r\n                </tr>\r\n                <tr>\r\n                    <td>Числа</td>\r\n                    <td>1234, 3.1415, 3+4j, 0Ы11, Decimal (), Fraction ()</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Строки</td>\r\n                    <td>'spam’, \"Bob' s\", b’a\\x01c’, u’sp\\xc4m’</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Списки</td>\r\n                    <td>[1,[2,’three’],'spam',4,4.5], list(range (10))</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Словари</td>\r\n                    <td>{’food’: 'spam', ’taste': 'yum’}, diet(hours=10)</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Кортежи</td>\r\n                    <td>(1,'spam',4,4.5], list(range (10))’U’), tuple('spam’), namedtuple</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Файлы</td>\r\n                    <td>open('eggs.txt'), open(r’C:\\ham.bin', 'wb')</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Множества</td>\r\n                    <td>set('abc'), {'a', 'b', ’c'}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Прочие основные типы</td>\r\n                    <td>Булевские значения, сами типы, None</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Типы программных единиц</td>\r\n                    <td>Функции, модули, классы</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Типы, связанные с реализацией</td>\r\n                    <td>Скомпилированный код, трассировки стека</td>\r\n                </tr>\r\n            </table> \r\n<p></p>\r\nОднако для ряда читателей типы объектов в таблице могут быть более универ­сальными и мощными, нежели то, к чему они привыкли. Например, вы обнаружите,\r\nчто одни лишь списки и словари являются мощными инструментами представления\r\nданных, позволяющими избавиться от большинства работ, которые приходится вы­\r\nполнять для поддержки коллекций и поиска в языках более низкого уровня. Вкратце\r\nсписки предоставляют упорядоченные коллекции других объектов, а словари хранят\r\nобъекты по ключам; и списки, и словари могут быть вложенными, расти и уменьшать­\r\nся по требованию и содержать объекты любого типа.\r\nПрисутствующие в табл. 4.1 программные единицы — функции, модули и классы (мы\r\nвстретимся с ними в последующих частях книги) — в Python также представляют со­\r\nбой объекты. Они создаются посредством операторов и выражений вроде def, class,\r\nimport и lambda и могут свободно передаваться между сценариями, храниться внут­\r\nри других объектов и т.д. Вдобавок Python предлагает набор типов, связанных с реали­\r\nзацией, таких как объекты скомпилированного кода, которые обычно представляют\r\nбольший интерес для создателей инструментов, чем для разработчиков приложений;\r\nмы исследуем типы подобного рода в последующих частях книги, хотя и менее глубо­\r\nко из-за их специализированных ролей.\r\nНесмотря на ее заголовок, табл. 4.1 в действительности нельзя считать полной,\r\nт.к. все, что мы обрабатываем в программах Python, является какой-то разновидностью\r\nобъекта. Скажем, когда мы выполняем сопоставление текста с образцом в Python, то\r\nсоздаем объекты образцов, а когда пишем сценарий для работы с сетью, то приме­\r\nняем объекты сокетов. Эти другие виды объектов, как правило, создаются путем им­\r\nпортирования и использования функций в библиотечных модулях (ге и socket для\r\nсопоставления с образцом и для сокетов) и обладают своим поведением.\r\nТем не менее, другие типы объектов из табл. 4.1 мы обычно называем основными ти­\r\nпами данных, потому что они фактически встроены в язык Python, т.е. для генерации\r\nбольшинства из них имеется специфический синтаксис выражений. Например, когда\r\nвы запускаете следующий код с символами, заключенными в кавычки:\r\n»> 'spam'\r\nто, говоря формально, выполняете литеральное выражение, которое генерирует и\r\nвозвращает новый объект строки. Для создания этого объекта в языке Python сущест­\r\nвует специальный синтаксис. Аналогичным образом выражение, помещенное в квад­\r\nратные скобки, создает список, выражение в фигурных скобках — словаръ и т.д. Хотя,\r\nкак мы увидим, в Python нет объявлений типов, типы создаваемых и применяемых\r\nобъектов определяет синтаксис выполняемых выражений. Фактически выражения,\r\nгенерирующие объекты, такие как приведенные в табл. 4.1, в общем смысле являются\r\nисточником происхождения типов в языке Python.\r\nНе менее важно и то, что после того, как объект создан, он навсегда привязыва­\r\nется к своему набору операций; на строке можно выполнять только строковые опе­\r\nрации, а на списке — только списковые операции. Формально это означает, что язык\r\nPython динамически типизирован — модель, которая отслеживает типы автоматически,\r\nне требуя объявления, но он также строго типизирован — ограничение, обусловливаю­\r\nщее возможность выполнения на объекте только допустимых для его типа операций.\r\nКаждый тип объекта из табл. 4.1 мы подробно исследуем в последующих главах.\r\nОднако прежде чем погружаться в детали, давайте посмотрим на основные объекты\r\nPython в действии. Далее в главе предлагается обзор операций, которые будут рассматри­\r\nваться в оставшихся главах части. Не ожидайте здесь найти полную историю — цель главы\r\nв том, чтобы разжечь аппетит и представить ряд ключевых идей. Тем не менее, лучший\r\nспособ начать — приступить к работе, поэтому мы сразу перейдем к реалистичному коду.","id":"68a6feee-f6ad-4e17-bf43-b5a9906b95f0"},{"title":"Числа","price":"100","img":"Если в прошлом вы занимались программированием или написанием сценариев, тогда некоторые типы из табл. 4.1 вероятно покажутся знакомыми. Но даже когда это не так, числа довольно-таки прямолинейны. Набор основных объектов Python вклю­чает ожидаемые типы: целые числа, не имеющие дробной части, числа с плавающей точ­кой, которые имеют дробную часть, и более экзотические типы — комплексные числа с мнимой частью, десятичные числа с фиксированной точностью, рациональные числа с числителем и знаменателем, а также полнофункциональные множества. Встроенных чисел вполне достаточно для представления большинства числовых величин (от ва­шего возраста до сальдо вашего банковского счета), но доступно еще больше типов в виде сторонних дополнений. Несмотря на предложение ряда причудливых вариантов, основные числовые типы Python, в общем-то, являются базовыми. Числа в Python поддерживают обычные ма­тематические операции. Например, плюс (+) выполняет сложение, звездочка (*) ис­пользуется для умножения, а две звездочки (**) применяются для возведения в сте­пень:<br>\r\n>>> 123 + 222                           # Целочисленное сложение<br>\r\n345<br>\r\n»> 1.5*4                                      # Умножение с плавающей точкой\r\n6.0\r\n»> 2 ** 100\r\n# Снова 2 в степени 100\r\n1267650600228229401496703205376\r\nОбратите внимание на результат последней операции: целочисленный тип Python\r\nЗ.Х при необходимости автоматически обеспечивает повышенную точность для боль­\r\nших чисел (в Python 2.Х числа, слишком большие для обычного целочисленного типа,\r\nподдерживались отдельным длинным целочисленным типом). Скажем, в Python вы\r\nможете вычислить 2 в степени 1 000 000 в виде целого числа, но вероятно не должны\r\nвыводить результат — он будет содержать свыше 300 000 цифр, поэтому придется по­\r\nдождать:\r\n»> len(str(2 ** 1000000))\r\n# Сколько цифр в действительно БОЛЬШОМ числе?\r\n301030\r\nТакая форма вложенных вызовов работает изнутри наружу — сначала результиру­\r\nющее число операции * * преобразуется в строку цифр с помощью встроенной функ­\r\nции str, после чего посредством 1еп получается длина итоговой строки. Конечным\r\nрезультатом будет количество цифр. Функции str и 1еп работают со многими типами\r\nобъектов; в ходе чтения книги вы узнаете о них больше сведений.\r\nВ версиях, предшествующих Python 2.7 и Python 3.1, после начала эксперименти­\r\nрования с числами с плавающей точкой вы вполне вероятно встретите кое-что, на\r\nпервый взгляд кажущееся странным:\r\n»> 3.1415 * 2\r\n# герг: вид как в коде (Python < 2 . 7 и 3.1)\r\n6.2830000000000004\r\n>» print(3.1415 * 2)\r\n# str: вид, дружественный к пользователю\r\n6.283\r\nПервый результат не является ошибкой; это проблема отображения. На самом\r\nделе есть два способа вывода любого объекта в Python — с полной точностью (как в\r\nпервом результате) и в форме, дружественной к пользователю (как во втором резуль­\r\nтате). Формально первая форма называется герг (вид объекта как в коде), а вторая — str (вид, дружественный к пользователю). В старых версиях Python форма герг для\r\nчисел с плавающей точкой временами отображала с большей точностью, чем можно\r\nбыло ожидать. Разница также может быть значимой, когда мы подойдем к использо­\r\nванию классов. А пока если что-то выглядит странным, попробуйте отобразить его с\r\nпомощью оператора вызова встроенной функции print.\r\nНо лучше обновиться до версии Python 2.7 и последней Python З.Х, где числа с\r\nплавающей точкой отображаются более разумно, обычно с меньшим количеством па­\r\nразитных цифр — поскольку книга основана на Python 2.7 и Python З.Х, такая форма\r\nотображения чисел с плавающей точкой будет встречаться повсеместно:\r\n»> 3.1415 * 2\r\n# герг: вид как в коде (Python >= 2.7 и 3.1)\r\n6.283\r\nПомимо выражений в состав Python входит несколько полезных числовых модулей\r\n(модули — это просто пакеты дополнительных инструментов, которые мы импортиру­\r\nем для их применения):\r\n>>> import math\r\n»> ma th. pi\r\n3.141592653589793\r\n»> math. sqrt(85)\r\n9.219544457292887\r\nМодуль math содержит более сложные числовые инструменты в виде функций, а\r\nмодуль random выполняет генерацию случайных чисел и случайный выбор (здесь из\r\nзадаваемого в квадратных скобках списка Python — упорядоченной коллекции других\r\nобъектов, которая будет представлена позже в главе):\r\n»> import random\r\n»> random. random ()\r\n0.7082048489415967\r\n>» random, choice ([1, 2, 3, 4])\r\n1\r\nPython также включает более экзотические числовые объекты, такие как комплек­\r\nсные числа, числа с фиксированной точностью, рациональные числа, множества и\r\nбулевские числа, а в области сторонних расширений с открытым кодом доступно еще\r\nбольше числовых объектов (например, матрицы, векторы и числа с повышенной точ­\r\nностью). Мы обсудим их позже в главе и книге.\r\nДо сих пор мы использовали Python во многом подобно простому калькулято­\r\nру; чтобы лучше оценить его встроенные типы, давайте перейдем к исследованию\r\nстрок.","id":"5498dcea-ca95-4802-8fc5-8140611d9822"}]